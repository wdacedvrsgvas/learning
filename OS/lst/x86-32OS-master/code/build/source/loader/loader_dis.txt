
C:/Users/jenny/Desktop/OS/code/build/source/loader/loader.elf:     file format elf32-i386
C:/Users/jenny/Desktop/OS/code/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000660 memsz 0x00000660 flags r-x
    LOAD off    0x00001660 vaddr 0x00009660 paddr 0x00009660 align 2**12
         filesz 0x00000018 memsz 0x00000074 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062b  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000035  0000862b  0000862b  0000162b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00009660  00009660  00001660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  00009680  00009680  00001678  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001690  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c0  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000331  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032c  00000000  00000000  000022e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000400  00000000  00000000  00002870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
0000862b l    d  .rodata	00000000 .rodata
00009660 l    d  .data	00000000 .data
00009680 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
0000801a l     F .text	0000000b cli
00008025 l     F .text	0000002a inb
0000804f l     F .text	0000002d outb
0000807c l     F .text	00000036 lgdt
000080b2 l     F .text	0000001a read_cr0
000080cc l     F .text	00000012 write_cr0
000080de l     F .text	0000002b far_jump
00008109 l     F .text	0000003b show_msg
00008144 l     F .text	00000139 detect_memory
0000827d l     F .text	00000096 enter_protected_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008336 l     F .text	0000001d inb
00008353 l     F .text	0000001f outb
00008372 l     F .text	0000001f inw
00008391 l     F .text	0000012f read_disk
000084c0 l     F .text	0000011a reload_elf_file
000085da l     F .text	00000005 die
00008313 g     F .text	00000023 loader_entry
00009660 g     O .data	00000018 gdt_table
000085df g     F .text	0000004c load_kernel
00009680 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
00009678 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
00009678 g       .data	00000000 _edata
000096d4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
	.global _start
	
	# 声明函数为外部声明的函数
	.extern loader_entry
_start:
	jmp loader_entry
    8000:	e9 10 03             	jmp    8313 <loader_entry>

00008003 <protect_mode_entry>:
	.text	# 表示下面的为代码
	.global protect_mode_entry # 将函数声明为全局的
	.extern load_kernel # 跳转到C代码环境去
protect_mode_entry:
	# 远跳转过来之后清空流水线
	mov $16, %ax # 为什么设置为16之后的课程会解释
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs
	jmp $8, $load_kernel # 为什么为8，之后的课程会解释
    8011:	ea df 85 00 00       	ljmp   $0x0,$0x85df
    8016:	08 00                	or     %al,(%bx,%si)
    8018:	eb fe                	jmp    8018 <protect_mode_entry+0x15>

0000801a <cli>:
#define CPU_INSTR_H

#include "types.h"

//使用内联函数形式写关中断函数
static inline void cli(void){
    801a:	66 55                	push   %ebp
    801c:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    801f:	fa                   	cli    
}
    8020:	90                   	nop
    8021:	66 5d                	pop    %ebp
    8023:	66 c3                	retl   

00008025 <inb>:
static inline void sti(void){
    __asm__ __volatile__("sti");
}

//读端口函数
static inline uint8_t inb(uint16_t port){
    8025:	66 55                	push   %ebp
    8027:	66 89 e5             	mov    %esp,%ebp
    802a:	66 83 ec 14          	sub    $0x14,%esp
    802e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8033:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    //返回参数
    uint8_t rv;
    //内联汇编形式读取端口
    __asm__ __volatile__(
    8037:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    803d:	66 89 c2             	mov    %eax,%edx
    8040:	ec                   	in     (%dx),%al
    8041:	67 88 45 ff          	mov    %al,-0x1(%ebp)
        "inb %[p], %[v]"
        :[v]"=a"(rv) : [p]"d"(port)
        );
    return rv;
    8045:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    /*注意的是：
    inb al, dx是intel的汇编语法，而下面的
    inb %[p], %[v]是GCC的汇编语法
    两者表示同一指令，但是写法不一样。源，目的操作数位置正好相反
    */
}
    804b:	66 c9                	leavel 
    804d:	66 c3                	retl   

0000804f <outb>:

//写端口函数
static inline void outb(uint16_t port, uint8_t data){
    804f:	66 55                	push   %ebp
    8051:	66 89 e5             	mov    %esp,%ebp
    8054:	66 83 ec 08          	sub    $0x8,%esp
    8058:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    805d:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8062:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8066:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    /*指令格式为
    outb al(数据), dx(端口)
    */
    __asm__ __volatile__(
    806a:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8070:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8076:	ee                   	out    %al,(%dx)
    /*注意的是：
    outb al, dx是intel的汇编语法，而下面的
    outb %[v], %[p]是GCC的汇编语法
    两者表示同一指令，但是写法不一样。源，目的操作数位置正好相反
    */
}
    8077:	90                   	nop
    8078:	66 c9                	leavel 
    807a:	66 c3                	retl   

0000807c <lgdt>:

//加载GDT表函数,后续的课程会进一步讲解
static inline void lgdt(uint32_t start, uint32_t size){
    807c:	66 55                	push   %ebp
    807e:	66 89 e5             	mov    %esp,%ebp
    8081:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    }gdt;
    
    gdt.start31_16 = start >> 16;
    8085:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    808a:	66 c1 e8 10          	shr    $0x10,%eax
    808e:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
    8092:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8097:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
    809b:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80a0:	66 83 e8 01          	sub    $0x1,%eax
    80a4:	67 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__(
    80a8:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
        "lgdt %[g]"
        ::[g]"m"(gdt)
    );
}
    80ad:	90                   	nop
    80ae:	66 c9                	leavel 
    80b0:	66 c3                	retl   

000080b2 <read_cr0>:
}



//读取cr0
static inline uint16_t read_cr0(void){
    80b2:	66 55                	push   %ebp
    80b4:	66 89 e5             	mov    %esp,%ebp
    80b7:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__(
    80bb:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
    80c0:	0f 20 c0             	mov    %cr0,%eax
        "mov %%cr0, %[v]"
        ::[v]"r"(cr0)
    );
    return cr0;
    80c3:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c8:	66 c9                	leavel 
    80ca:	66 c3                	retl   

000080cc <write_cr0>:

//写入cr0
static inline void write_cr0(uint32_t v){
    80cc:	66 55                	push   %ebp
    80ce:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__(
    80d1:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d6:	0f 22 c0             	mov    %eax,%cr0
        "mov %[v], %%cr0"
        ::[v]"r"(v)
    );
}
    80d9:	90                   	nop
    80da:	66 5d                	pop    %ebp
    80dc:	66 c3                	retl   

000080de <far_jump>:

//远跳转(后续的课程会对跳转函数进行讲解)
static inline void far_jump(uint32_t selector, uint32_t offset){
    80de:	66 55                	push   %ebp
    80e0:	66 89 e5             	mov    %esp,%ebp
    80e3:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
    80e7:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ec:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80f1:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f6:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)

    __asm__ __volatile(
    80fb:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    8100:	67 66 ff 28          	ljmpl  *(%eax)
        "ljmpl *(%[a])"
        ::[a]"r"(addr)
    );
}
    8104:	90                   	nop
    8105:	66 c9                	leavel 
    8107:	66 c3                	retl   

00008109 <show_msg>:
boot_info_t boot_info;



//通过内联汇编的形式编写输出字符串函数
static void show_msg(const char *msg){
    8109:	66 55                	push   %ebp
    810b:	66 89 e5             	mov    %esp,%ebp
    810e:	66 83 ec 10          	sub    $0x10,%esp
    char ch;
    while ((ch=*msg++)!='\0'){
    8112:	eb 0c                	jmp    8120 <show_msg+0x17>
        //原本仅需asm即可，但是编译器会自动对asm的内联汇编代码进行优化产生不可预知的错误
        //因此asm改为__asm__ __volatile__就可以告诉gcc不优化该段内联汇编代码
        __asm__ __volatile__(
    8114:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    811a:	b4 0e                	mov    $0xe,%ah
    811c:	88 c0                	mov    %al,%al
    811e:	cd 10                	int    $0x10
    while ((ch=*msg++)!='\0'){
    8120:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8125:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    812a:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    812f:	67 66 0f b6 00       	movzbl (%eax),%eax
    8134:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8138:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813d:	75 d5                	jne    8114 <show_msg+0xb>
            "mov $0xe, %%ah\n\t"
            "mov %[c], %%al\n\t"
            "int $0x10"::[c]"r"(ch)
        );
    } 
}
    813f:	90                   	nop
    8140:	66 c9                	leavel 
    8142:	66 c3                	retl   

00008144 <detect_memory>:

//内存检测函数
static void detect_memory(void){
    8144:	66 55                	push   %ebp
    8146:	66 89 e5             	mov    %esp,%ebp
    8149:	66 57                	push   %edi
    814b:	66 56                	push   %esi
    814d:	66 53                	push   %ebx
    814f:	66 83 ec 30          	sub    $0x30,%esp
    SMAP_entry_t smap_entry;
    uint32_t contID = 0;
    8153:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    815a:	00 00 
    uint32_t signature,bytes;
    show_msg("try to detect memory:");//打印提示信息表示开始检测内存
    815c:	66 68 2b 86 00 00    	pushl  $0x862b
    8162:	66 e8 a1 ff ff ff    	calll  8109 <show_msg>
    8168:	66 83 c4 04          	add    $0x4,%esp
    boot_info.ram_region_count = 0;//设置初值为0
    816c:	66 c7 06 d0 96 00 00 	movl   $0x0,-0x6930
    8173:	00 00 

    //通过内联汇编逐渐填满Boot_info中的记录信息的结构体数组变量
    for(int i = 0;i<BOOT_RAM_REGION_MAX;i++){
    8175:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    817c:	00 00 
    817e:	e9 d0 00             	jmp    8251 <detect_memory+0x10d>
        SMAP_entry_t *entry = &smap_entry;
    8181:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8186:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)
        __asm__ __volatile__(
    818b:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8191:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8196:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    819c:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a2:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81a7:	66 89 f7             	mov    %esi,%edi
    81aa:	cd 15                	int    $0x15
    81ac:	66 89 da             	mov    %ebx,%edx
    81af:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b4:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81b9:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
            "int $0x15"
            :"=a"(signature),"=c"(bytes),"=b"(contID)
            :"a"(0xE820),"b"(contID),"c"(24),"d"(0x534D4150),"D"(entry)
        );
        //每执行一次内联汇编语句就判断一次结果是否为0x534D4150,如果不是则表示该结果错误
        if(signature!=0x534D4150){
    81be:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81c5:	4d 53 
    81c7:	74 13                	je     81dc <detect_memory+0x98>
            //使用signature来判断是因为signature存储的是EAX的值
            show_msg("failed\r\n");
    81c9:	66 68 41 86 00 00    	pushl  $0x8641
    81cf:	66 e8 34 ff ff ff    	calll  8109 <show_msg>
    81d5:	66 83 c4 04          	add    $0x4,%esp
            return;//错误就结束循环退出函数
    81d9:	e9 92 00             	jmp    826e <detect_memory+0x12a>
        }
        if(bytes > 20 && (entry->ACPI & 0x0001) == 0){
    81dc:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e2:	76 13                	jbe    81f7 <detect_memory+0xb3>
    81e4:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81e9:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81ee:	66 83 e0 01          	and    $0x1,%eax
    81f2:	66 85 c0             	test   %eax,%eax
    81f5:	74 53                	je     824a <detect_memory+0x106>
            continue;//如果ACPI的值为0时表示该条数据应该被忽略
        }

        if(entry->Type == 1){
    81f7:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fc:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8201:	66 83 f8 01          	cmp    $0x1,%eax
    8205:	75 39                	jne    8240 <detect_memory+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8207:	66 a1 d0 96          	mov    0x96d0,%eax
    820b:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8210:	67 66 8b 12          	mov    (%edx),%edx
    8214:	67 66 89 14 c5 80 96 	mov    %edx,0x9680(,%eax,8)
    821b:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    821d:	66 a1 d0 96          	mov    0x96d0,%eax
    8221:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8226:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    822b:	67 66 89 14 c5 84 96 	mov    %edx,0x9684(,%eax,8)
    8232:	00 00 
            boot_info.ram_region_count++;
    8234:	66 a1 d0 96          	mov    0x96d0,%eax
    8238:	66 83 c0 01          	add    $0x1,%eax
    823c:	66 a3 d0 96          	mov    %eax,0x96d0
        }

        if(contID == 0){
    8240:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8246:	74 15                	je     825d <detect_memory+0x119>
    8248:	eb 01                	jmp    824b <detect_memory+0x107>
            continue;//如果ACPI的值为0时表示该条数据应该被忽略
    824a:	90                   	nop
    for(int i = 0;i<BOOT_RAM_REGION_MAX;i++){
    824b:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8251:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8257:	0f 8e 26 ff          	jle    8181 <detect_memory+0x3d>
    825b:	eb 01                	jmp    825e <detect_memory+0x11a>
            break;
    825d:	90                   	nop
        }
    }
    show_msg("ok.\r\n");
    825e:	66 68 4a 86 00 00    	pushl  $0x864a
    8264:	66 e8 9f fe ff ff    	calll  8109 <show_msg>
    826a:	66 83 c4 04          	add    $0x4,%esp
}
    826e:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8273:	66 5b                	pop    %ebx
    8275:	66 5e                	pop    %esi
    8277:	66 5f                	pop    %edi
    8279:	66 5d                	pop    %ebp
    827b:	66 c3                	retl   

0000827d <enter_protected_mode>:

};


//进入保护模式函数
static void enter_protected_mode(void){
    827d:	66 55                	push   %ebp
    827f:	66 89 e5             	mov    %esp,%ebp
    8282:	66 83 ec 10          	sub    $0x10,%esp
    //1.关中断
    cli();
    8286:	66 e8 8e fd ff ff    	calll  801a <cli>

    //2.开A20地址线
    uint8_t v = inb(0x92);
    828c:	66 68 92 00 00 00    	pushl  $0x92
    8292:	66 e8 8d fd ff ff    	calll  8025 <inb>
    8298:	66 83 c4 04          	add    $0x4,%esp
    829c:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, v | 0x2);
    82a0:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a6:	66 83 c8 02          	or     $0x2,%eax
    82aa:	66 0f b6 c0          	movzbl %al,%eax
    82ae:	66 50                	push   %eax
    82b0:	66 68 92 00 00 00    	pushl  $0x92
    82b6:	66 e8 93 fd ff ff    	calll  804f <outb>
    82bc:	66 83 c4 08          	add    $0x8,%esp

    //3.加载GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    82c0:	66 b8 60 96 00 00    	mov    $0x9660,%eax
    82c6:	66 6a 18             	pushl  $0x18
    82c9:	66 50                	push   %eax
    82cb:	66 e8 ab fd ff ff    	calll  807c <lgdt>
    82d1:	66 83 c4 08          	add    $0x8,%esp

    //4.开启保护模式的使能位
    uint32_t cr0 = read_cr0();
    82d5:	66 e8 d7 fd ff ff    	calll  80b2 <read_cr0>
    82db:	66 0f b7 c0          	movzwl %ax,%eax
    82df:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1<<0));
    82e4:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82e9:	66 83 c8 01          	or     $0x1,%eax
    82ed:	66 50                	push   %eax
    82ef:	66 e8 d7 fd ff ff    	calll  80cc <write_cr0>
    82f5:	66 83 c4 04          	add    $0x4,%esp

    //5.远跳转，清空流水线
    far_jump(8, (uint32_t)protect_mode_entry);
    82f9:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    82ff:	66 50                	push   %eax
    8301:	66 6a 08             	pushl  $0x8
    8304:	66 e8 d4 fd ff ff    	calll  80de <far_jump>
    830a:	66 83 c4 08          	add    $0x8,%esp
}
    830e:	90                   	nop
    830f:	66 c9                	leavel 
    8311:	66 c3                	retl   

00008313 <loader_entry>:

void loader_entry(void){
    8313:	66 55                	push   %ebp
    8315:	66 89 e5             	mov    %esp,%ebp
    show_msg("...loading...\n\r");
    8318:	66 68 50 86 00 00    	pushl  $0x8650
    831e:	66 e8 e5 fd ff ff    	calll  8109 <show_msg>
    8324:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    8328:	66 e8 16 fe ff ff    	calll  8144 <detect_memory>
    enter_protected_mode();
    832e:	66 e8 49 ff ff ff    	calll  827d <enter_protected_mode>
    for(;;){}
    8334:	eb fe                	jmp    8334 <loader_entry+0x21>

00008336 <inb>:
static inline uint8_t inb(uint16_t port){
    8336:	55                   	push   %bp
    8337:	89 e5                	mov    %sp,%bp
    8339:	83 ec 14             	sub    $0x14,%sp
    833c:	8b 45 08             	mov    0x8(%di),%ax
    833f:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__(
    8343:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8347:	89 c2                	mov    %ax,%dx
    8349:	ec                   	in     (%dx),%al
    834a:	88 45 ff             	mov    %al,-0x1(%di)
    return rv;
    834d:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    8351:	c9                   	leave  
    8352:	c3                   	ret    

00008353 <outb>:
static inline void outb(uint16_t port, uint8_t data){
    8353:	55                   	push   %bp
    8354:	89 e5                	mov    %sp,%bp
    8356:	83 ec 08             	sub    $0x8,%sp
    8359:	8b 55 08             	mov    0x8(%di),%dx
    835c:	8b 45 0c             	mov    0xc(%di),%ax
    835f:	66 89 55 fc          	mov    %edx,-0x4(%di)
    8363:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__(
    8366:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    836a:	0f b7 55 fc          	movzww -0x4(%di),%dx
    836e:	ee                   	out    %al,(%dx)
}
    836f:	90                   	nop
    8370:	c9                   	leave  
    8371:	c3                   	ret    

00008372 <inw>:

//读端口函数
static inline uint16_t inw(uint16_t port){
    8372:	55                   	push   %bp
    8373:	89 e5                	mov    %sp,%bp
    8375:	83 ec 14             	sub    $0x14,%sp
    8378:	8b 45 08             	mov    0x8(%di),%ax
    837b:	66 89 45 ec          	mov    %eax,-0x14(%di)
    //返回参数
    uint16_t rv;
    // in ax, dx
    __asm__ __volatile__(
    837f:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8383:	89 c2                	mov    %ax,%dx
    8385:	66 ed                	in     (%dx),%eax
    8387:	66 89 45 fe          	mov    %eax,-0x2(%di)
        "in %[p], %[v]"
        :[v]"=a"(rv) : [p]"d"(port)
        );
    return rv;
    838b:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    838f:	c9                   	leave  
    8390:	c3                   	ret    

00008391 <read_disk>:

#include "loader.h"
#include "comm/elf.h"

//使用LBA48位模式读磁盘函数，参数分别为 读取位置，读多少个，读取到的数据缓存存放位置
static void read_disk(uint32_t sector, uint32_t sector_count, uint8_t *buf){
    8391:	55                   	push   %bp
    8392:	89 e5                	mov    %sp,%bp
    8394:	53                   	push   %bx
    8395:	83 ec 10             	sub    $0x10,%sp
    /*设置LBA模式的参数
    */
    outb(0x1F6, 0xE0);//选择读取硬盘
    8398:	68 e0 00             	push   $0xe0
    839b:	00 00                	add    %al,(%bx,%si)
    839d:	68 f6 01             	push   $0x1f6
    83a0:	00 00                	add    %al,(%bx,%si)
    83a2:	e8 ac ff             	call   8351 <inb+0x1b>
    83a5:	ff                   	(bad)  
    83a6:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2, (uint8_t)(sector_count >> 8));
    83aa:	8b 45 0c             	mov    0xc(%di),%ax
    83ad:	c1 e8 08             	shr    $0x8,%ax
    83b0:	0f b6 c0             	movzbw %al,%ax
    83b3:	50                   	push   %ax
    83b4:	68 f2 01             	push   $0x1f2
    83b7:	00 00                	add    %al,(%bx,%si)
    83b9:	e8 95 ff             	call   8351 <inb+0x1b>
    83bc:	ff                   	(bad)  
    83bd:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    /*
    下面的0x1Fx分别表示LBA参数的从低到高的位数
    */
    outb(0x1F3, (uint8_t) (sector >> 24));
    83c1:	8b 45 08             	mov    0x8(%di),%ax
    83c4:	c1 e8 18             	shr    $0x18,%ax
    83c7:	0f b6 c0             	movzbw %al,%ax
    83ca:	50                   	push   %ax
    83cb:	68 f3 01             	push   $0x1f3
    83ce:	00 00                	add    %al,(%bx,%si)
    83d0:	e8 7e ff             	call   8351 <inb+0x1b>
    83d3:	ff                   	(bad)  
    83d4:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, 0);
    83d8:	6a 00                	push   $0x0
    83da:	68 f4 01             	push   $0x1f4
    83dd:	00 00                	add    %al,(%bx,%si)
    83df:	e8 6f ff             	call   8351 <inb+0x1b>
    83e2:	ff                   	(bad)  
    83e3:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, 0);
    83e7:	6a 00                	push   $0x0
    83e9:	68 f5 01             	push   $0x1f5
    83ec:	00 00                	add    %al,(%bx,%si)
    83ee:	e8 60 ff             	call   8351 <inb+0x1b>
    83f1:	ff                   	(bad)  
    83f2:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    
    outb(0x1F2, (uint8_t)sector_count);
    83f6:	8b 45 0c             	mov    0xc(%di),%ax
    83f9:	0f b6 c0             	movzbw %al,%ax
    83fc:	50                   	push   %ax
    83fd:	68 f2 01             	push   $0x1f2
    8400:	00 00                	add    %al,(%bx,%si)
    8402:	e8 4c ff             	call   8351 <inb+0x1b>
    8405:	ff                   	(bad)  
    8406:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3,(uint8_t)(sector));
    840a:	8b 45 08             	mov    0x8(%di),%ax
    840d:	0f b6 c0             	movzbw %al,%ax
    8410:	50                   	push   %ax
    8411:	68 f3 01             	push   $0x1f3
    8414:	00 00                	add    %al,(%bx,%si)
    8416:	e8 38 ff             	call   8351 <inb+0x1b>
    8419:	ff                   	(bad)  
    841a:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t)(sector >> 8));
    841e:	8b 45 08             	mov    0x8(%di),%ax
    8421:	c1 e8 08             	shr    $0x8,%ax
    8424:	0f b6 c0             	movzbw %al,%ax
    8427:	50                   	push   %ax
    8428:	68 f4 01             	push   $0x1f4
    842b:	00 00                	add    %al,(%bx,%si)
    842d:	e8 21 ff             	call   8351 <inb+0x1b>
    8430:	ff                   	(bad)  
    8431:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t)(sector >> 16));
    8435:	8b 45 08             	mov    0x8(%di),%ax
    8438:	c1 e8 10             	shr    $0x10,%ax
    843b:	0f b6 c0             	movzbw %al,%ax
    843e:	50                   	push   %ax
    843f:	68 f5 01             	push   $0x1f5
    8442:	00 00                	add    %al,(%bx,%si)
    8444:	e8 0a ff             	call   8351 <inb+0x1b>
    8447:	ff                   	(bad)  
    8448:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F7, 0x24);
    844c:	6a 24                	push   $0x24
    844e:	68 f7 01             	push   $0x1f7
    8451:	00 00                	add    %al,(%bx,%si)
    8453:	e8 fb fe             	call   8351 <inb+0x1b>
    8456:	ff                   	(bad)  
    8457:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    uint16_t * data_buf = (uint16_t *)buf;
    845b:	8b 45 10             	mov    0x10(%di),%ax
    845e:	89 45 f8             	mov    %ax,-0x8(%di)
    while(sector_count--){
    8461:	eb 4a                	jmp    84ad <read_disk+0x11c>
        while((inb(0x1F7) & 0x88) != 0x8){}//通过状态寄存器可知当第三位为1时表示就绪，可以写数据或者读数据
    8463:	90                   	nop
    8464:	68 f7 01             	push   $0x1f7
    8467:	00 00                	add    %al,(%bx,%si)
    8469:	e8 c8 fe             	call   8334 <loader_entry+0x21>
    846c:	ff                   	(bad)  
    846d:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8471:	0f b6 c0             	movzbw %al,%ax
    8474:	25 88 00             	and    $0x88,%ax
    8477:	00 00                	add    %al,(%bx,%si)
    8479:	83 f8 08             	cmp    $0x8,%ax
    847c:	75 e6                	jne    8464 <read_disk+0xd3>
        //开始读一个扇区数据,并将数据写入缓存
        for(int i = 0; i < SECTOR_SIZE /2 ;i++){
    847e:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    8483:	00 00                	add    %al,(%bx,%si)
    8485:	eb 1d                	jmp    84a4 <read_disk+0x113>
            *data_buf++ = inw(0x1F0);//从0x1F0读
    8487:	8b 5d f8             	mov    -0x8(%di),%bx
    848a:	8d 43 02             	lea    0x2(%bp,%di),%ax
    848d:	89 45 f8             	mov    %ax,-0x8(%di)
    8490:	68 f0 01             	push   $0x1f0
    8493:	00 00                	add    %al,(%bx,%si)
    8495:	e8 d8 fe             	call   8370 <outb+0x1d>
    8498:	ff                   	(bad)  
    8499:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    849d:	66 89 03             	mov    %eax,(%bp,%di)
        for(int i = 0; i < SECTOR_SIZE /2 ;i++){
    84a0:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    84a4:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    84a9:	00 00                	add    %al,(%bx,%si)
    84ab:	7e da                	jle    8487 <read_disk+0xf6>
    while(sector_count--){
    84ad:	8b 45 0c             	mov    0xc(%di),%ax
    84b0:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84b3:	89 55 0c             	mov    %dx,0xc(%di)
    84b6:	85 c0                	test   %ax,%ax
    84b8:	75 a9                	jne    8463 <read_disk+0xd2>
        }
    }
}
    84ba:	90                   	nop
    84bb:	8b 5d fc             	mov    -0x4(%di),%bx
    84be:	c9                   	leave  
    84bf:	c3                   	ret    

000084c0 <reload_elf_file>:



//加载elf文件
static uint32_t reload_elf_file(uint8_t * file_buffer) {
    84c0:	55                   	push   %bp
    84c1:	89 e5                	mov    %sp,%bp
    84c3:	83 ec 20             	sub    $0x20,%sp
    Elf32_Ehdr * elf_hdr = (Elf32_Ehdr *)file_buffer;
    84c6:	8b 45 08             	mov    0x8(%di),%ax
    84c9:	89 45 e8             	mov    %ax,-0x18(%di)
    //检查是不是Elf文件
    if((elf_hdr->e_ident[0] != 0x7F) || (elf_hdr->e_ident[1] != 'E')
    84cc:	8b 45 e8             	mov    -0x18(%di),%ax
    84cf:	0f b6 00             	movzbw (%bx,%si),%ax
    84d2:	3c 7f                	cmp    $0x7f,%al
    84d4:	75 21                	jne    84f7 <reload_elf_file+0x37>
    84d6:	8b 45 e8             	mov    -0x18(%di),%ax
    84d9:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    84dd:	3c 45                	cmp    $0x45,%al
    84df:	75 16                	jne    84f7 <reload_elf_file+0x37>
        || (elf_hdr->e_ident[2] != 'L') || (elf_hdr->e_ident[3] != 'F')){
    84e1:	8b 45 e8             	mov    -0x18(%di),%ax
    84e4:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    84e8:	3c 4c                	cmp    $0x4c,%al
    84ea:	75 0b                	jne    84f7 <reload_elf_file+0x37>
    84ec:	8b 45 e8             	mov    -0x18(%di),%ax
    84ef:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    84f3:	3c 46                	cmp    $0x46,%al
    84f5:	74 0a                	je     8501 <reload_elf_file+0x41>
            //如果满足判断则说明不是ELF文件
            return 0;
    84f7:	b8 00 00             	mov    $0x0,%ax
    84fa:	00 00                	add    %al,(%bx,%si)
    84fc:	e9 d7 00             	jmp    85d6 <reload_elf_file+0x116>
    84ff:	00 00                	add    %al,(%bx,%si)
    }
    
    //判断完为ELF文件，现在需要
    for(int i = 0;i<elf_hdr->e_phnum;i++){
    8501:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    8506:	00 00                	add    %al,(%bx,%si)
    8508:	e9 b2 00             	jmp    85bd <reload_elf_file+0xfd>
    850b:	00 00                	add    %al,(%bx,%si)
        Elf32_Phdr * phdr = (Elf32_Phdr *)(file_buffer + elf_hdr->e_phoff) + i;
    850d:	8b 45 e8             	mov    -0x18(%di),%ax
    8510:	8b 50 1c             	mov    0x1c(%bx,%si),%dx
    8513:	8b 45 08             	mov    0x8(%di),%ax
    8516:	01 c2                	add    %ax,%dx
    8518:	8b 45 fc             	mov    -0x4(%di),%ax
    851b:	c1 e0 05             	shl    $0x5,%ax
    851e:	01 d0                	add    %dx,%ax
    8520:	89 45 e4             	mov    %ax,-0x1c(%di)
        if(phdr->p_type != PT_LOAD) {
    8523:	8b 45 e4             	mov    -0x1c(%di),%ax
    8526:	8b 00                	mov    (%bx,%si),%ax
    8528:	83 f8 01             	cmp    $0x1,%ax
    852b:	0f 85 89 00          	jne    85b8 <reload_elf_file+0xf8>
    852f:	00 00                	add    %al,(%bx,%si)
            //如果不等于，说明文件是不可加载的类型
            continue;
        }

        uint8_t * src = file_buffer + phdr->p_offset;
    8531:	8b 45 e4             	mov    -0x1c(%di),%ax
    8534:	8b 50 04             	mov    0x4(%bx,%si),%dx
    8537:	8b 45 08             	mov    0x8(%di),%ax
    853a:	01 d0                	add    %dx,%ax
    853c:	89 45 f8             	mov    %ax,-0x8(%di)
        uint8_t * dest = (uint8_t *)phdr->p_paddr;
    853f:	8b 45 e4             	mov    -0x1c(%di),%ax
    8542:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8545:	89 45 f4             	mov    %ax,-0xc(%di)
        for(int j = 0;j<phdr->p_filesz;j++){
    8548:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    854d:	00 00                	add    %al,(%bx,%si)
    854f:	eb 1b                	jmp    856c <reload_elf_file+0xac>
            *dest++ = *src++;
    8551:	8b 55 f8             	mov    -0x8(%di),%dx
    8554:	8d 42 01             	lea    0x1(%bp,%si),%ax
    8557:	89 45 f8             	mov    %ax,-0x8(%di)
    855a:	8b 45 f4             	mov    -0xc(%di),%ax
    855d:	8d 48 01             	lea    0x1(%bx,%si),%cx
    8560:	89 4d f4             	mov    %cx,-0xc(%di)
    8563:	0f b6 12             	movzbw (%bp,%si),%dx
    8566:	88 10                	mov    %dl,(%bx,%si)
        for(int j = 0;j<phdr->p_filesz;j++){
    8568:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    856c:	8b 45 e4             	mov    -0x1c(%di),%ax
    856f:	8b 50 10             	mov    0x10(%bx,%si),%dx
    8572:	8b 45 f0             	mov    -0x10(%di),%ax
    8575:	39 c2                	cmp    %ax,%dx
    8577:	77 d8                	ja     8551 <reload_elf_file+0x91>
        }

        //对取得bss初始化
        dest = (uint8_t *)phdr->p_paddr + phdr->p_filesz;
    8579:	8b 45 e4             	mov    -0x1c(%di),%ax
    857c:	8b 50 10             	mov    0x10(%bx,%si),%dx
    857f:	8b 45 e4             	mov    -0x1c(%di),%ax
    8582:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8585:	01 d0                	add    %dx,%ax
    8587:	89 45 f4             	mov    %ax,-0xc(%di)
        for(int j = 0;j<phdr->p_memsz - phdr->p_filesz; j++){
    858a:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    858f:	00 00                	add    %al,(%bx,%si)
    8591:	eb 10                	jmp    85a3 <reload_elf_file+0xe3>
            *dest++ = 0;
    8593:	8b 45 f4             	mov    -0xc(%di),%ax
    8596:	8d 50 01             	lea    0x1(%bx,%si),%dx
    8599:	89 55 f4             	mov    %dx,-0xc(%di)
    859c:	c6 00 00             	movb   $0x0,(%bx,%si)
        for(int j = 0;j<phdr->p_memsz - phdr->p_filesz; j++){
    859f:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    85a3:	8b 45 e4             	mov    -0x1c(%di),%ax
    85a6:	8b 50 14             	mov    0x14(%bx,%si),%dx
    85a9:	8b 45 e4             	mov    -0x1c(%di),%ax
    85ac:	8b 40 10             	mov    0x10(%bx,%si),%ax
    85af:	29 c2                	sub    %ax,%dx
    85b1:	8b 45 ec             	mov    -0x14(%di),%ax
    85b4:	39 c2                	cmp    %ax,%dx
    85b6:	77 db                	ja     8593 <reload_elf_file+0xd3>
    85b8:	eb 01                	jmp    85bb <reload_elf_file+0xfb>
            continue;
    85ba:	90                   	nop
    for(int i = 0;i<elf_hdr->e_phnum;i++){
    85bb:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    85bf:	8b 45 e8             	mov    -0x18(%di),%ax
    85c2:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    85c6:	0f b7 c0             	movzww %ax,%ax
    85c9:	39 45 fc             	cmp    %ax,-0x4(%di)
    85cc:	0f 8c 3b ff          	jl     850b <reload_elf_file+0x4b>
    85d0:	ff                   	(bad)  
    85d1:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
        }
    }

    return elf_hdr->e_entry;
    85d5:	8b 40 18             	mov    0x18(%bx,%si),%ax
}
    85d8:	c9                   	leave  
    85d9:	c3                   	ret    

000085da <die>:

static void die (int code) {
    85da:	55                   	push   %bp
    85db:	89 e5                	mov    %sp,%bp
    for(;;){};
    85dd:	eb fe                	jmp    85dd <die+0x3>

000085df <load_kernel>:
}

void load_kernel(void){
    85df:	55                   	push   %bp
    85e0:	89 e5                	mov    %sp,%bp
    85e2:	83 ec 18             	sub    $0x18,%sp
    //测试磁盘读取,内核从100个扇区开始读是为了给loader预留足够的位置，读500个扇区是留足够的内存给kernel使用
    read_disk(100, 500, (uint8_t*)SYS_KERNEL_LOAD_ADDR);
    85e5:	68 00 00             	push   $0x0
    85e8:	10 00                	adc    %al,(%bx,%si)
    85ea:	68 f4 01             	push   $0x1f4
    85ed:	00 00                	add    %al,(%bx,%si)
    85ef:	6a 64                	push   $0x64
    85f1:	e8 9b fd             	call   838f <inw+0x1d>
    85f4:	ff                   	(bad)  
    85f5:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)



    uint32_t kernel_entry = reload_elf_file((uint8_t*)SYS_KERNEL_LOAD_ADDR);
    85f9:	68 00 00             	push   $0x0
    85fc:	10 00                	adc    %al,(%bx,%si)
    85fe:	e8 bd fe             	call   84be <read_disk+0x12d>
    8601:	ff                   	(bad)  
    8602:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8606:	89 45 f4             	mov    %ax,-0xc(%di)
    if(kernel_entry==0){
    8609:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    860d:	75 0a                	jne    8619 <load_kernel+0x3a>
        die(-1);
    860f:	6a ff                	push   $0xffff
    8611:	e8 c4 ff             	call   85d8 <reload_elf_file+0x118>
    8614:	ff                   	(bad)  
    8615:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    }
    ((void (*)(boot_info_t *))kernel_entry)(&boot_info);
    8619:	8b 45 f4             	mov    -0xc(%di),%ax
    861c:	83 ec 0c             	sub    $0xc,%sp
    861f:	68 80 96             	push   $0x9680
    8622:	00 00                	add    %al,(%bx,%si)
    8624:	ff d0                	call   *%ax
    8626:	83 c4 10             	add    $0x10,%sp
    for(;;){}
    8629:	eb fe                	jmp    8629 <load_kernel+0x4a>
