
C:/Users/jenny/Desktop/OS/code/build/source/boot/boot.elf:     file format elf32-i386
C:/Users/jenny/Desktop/OS/code/build/source/boot/boot.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000c40 memsz 0x00000c40 flags r-x
    LOAD off    0x00000dfe vaddr 0x00007dfe paddr 0x00007dfe align 2**12
         filesz 0x00000002 memsz 0x00000002 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000040  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 boot_end      00000002  00007dfe  00007dfe  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000c1  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000040  00000000  00000000  00000f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000d6  00000000  00000000  00000f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e6  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007dfe l    d  boot_end	00000000 boot_end
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 CMakeFiles/boot.dir/start.S.obj
00007c13 l       .text	00000000 read_loader
00007dfe l       boot_end	00000000 boot_sig
00000000 l    df *ABS*	00000000 boot.c
00007c29 g     F .text	00000017 boot_entry
00007c00 g       .text	00000000 _start
00008c40 g       .text	00000000 __bss_start
00008c40 g       .text	00000000 _edata
00008c40 g       .text	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
	# 声明函数为外部声明的函数
	.extern boot_entry
_start:

	# 首先将段地址寄存器全部设置为0
	mov $0,%ax
    7c00:	b8 00 00             	mov    $0x0,%ax
	mov %ax,%ds
    7c03:	8e d8                	mov    %ax,%ds
	mov %ax,%ss
    7c05:	8e d0                	mov    %ax,%ss
	mov %ax,%es
    7c07:	8e c0                	mov    %ax,%es
	mov %ax,%fs
    7c09:	8e e0                	mov    %ax,%fs
	mov %ax,%gs
    7c0b:	8e e8                	mov    %ax,%gs

	# 初始化栈空间，设置栈的起始地址
	# 也可以使用  $_start,因为这个start程序汇编出来后就是放在0x7c00
	mov $0x7c00,%esp
    7c0d:	66 bc 00 7c 00 00    	mov    $0x7c00,%esp

00007c13 <read_loader>:
	# DL=驱动器，00H-7Fh：软盘；80H-0FFH：硬盘
	# ES：BX=缓冲区的地址
	# 出口参数：CF=0---操作成功，AH=00H,AL=传输的扇区数，否则AH=状态代码，参见功能01H中的说明

read_loader:
	mov $0x8000, %bx
    7c13:	bb 00 80             	mov    $0x8000,%bx
	mov $0x2, %ah
    7c16:	b4 02                	mov    $0x2,%ah
	# cx=ch:cl各八位
	# 扇区设置为2是因为BIOS认为磁盘的扇区是以1开始编号
	mov $0x2, %cx
    7c18:	b9 02 00             	mov    $0x2,%cx
	# 64个扇区表示32KB,因为一个扇区512字节
	mov $64, %al
    7c1b:	b0 40                	mov    $0x40,%al
	mov $0x0080, %dx
    7c1d:	ba 80 00             	mov    $0x80,%dx
	# 开始执行软中断
	int $0x13
    7c20:	cd 13                	int    $0x13
	jc read_loader 
    7c22:	72 ef                	jb     7c13 <read_loader>
	# 当使用-exec x /20xb 0x8000指令读取缓冲区数据时会发现数据与0x200位置数据一样，为什么一样呢?
	# 因为我们是从硬盘的第2个扇区开始读，而第一个扇区为512字节，也就是表示16进制的0x200，因为是从0x0开始编号，因此第一扇区的结束位置为0x199
	# 所以读取到的数据是0x200开始往后的64*512个字节

	# 通过jmp指令直接跳转到函数中
	jmp boot_entry
    7c24:	e9 02 00             	jmp    7c29 <boot_entry>

	# 原地跳转指令
	jmp .
    7c27:	eb fe                	jmp    7c27 <read_loader+0x14>

00007c29 <boot_entry>:

/**
 * Boot的C入口函数
 * 只完成一项功能，即从磁盘找到loader文件然后加载到内容中，并跳转过去
 */
void boot_entry(void) {
    7c29:	66 55                	push   %ebp
    7c2b:	66 89 e5             	mov    %esp,%ebp
    7c2e:	66 83 ec 08          	sub    $0x8,%esp
    //通过函数指针的方式强制转化该地址并调用该地址完成工程之间的跳转
    ((void (*)(void))LOADER_START_ADDR)();
    7c32:	66 b8 00 80 00 00    	mov    $0x8000,%eax
    7c38:	66 ff d0             	calll  *%eax
} 
    7c3b:	90                   	nop
    7c3c:	66 c9                	leavel 
    7c3e:	66 c3                	retl   

Disassembly of section boot_end:

00007dfe <boot_sig>:
    7dfe:	55                   	push   %bp
    7dff:	aa                   	stos   %al,%es:(%di)
